install.packages(c("BiocManager", "ggplot2", "gplots", "pheatmap", "RColorBrewer", "reshape2"))
helloLinuxHint <- "Hello World"
print (helloLinuxHint)
ls
ls()
Rscript linuxhint.R
q()
sd
my_std_error <- function(x){
sd = sd(x)
len = length(x)
se = sd/sqrt(len)
}
numbers <- c(1:10)
numbers
my_std_error(numbers)
err <- my_std_error(numbers)
err
q()
q()
q()
q()
err
BiocManager::install("dada2")
install.packages("dada2")
install.packages("littler")
exit()
quit()
n <- 25
ci <- c(65,77)
x_bar <- mean(ci)
S2 <- n^2 * (x_bar - ci[1])/1.96
n1 <- 43
ci1 <- c(1,6)
# Take the middle of the CI to get x_bar (3.5).
x_bar1 <- mean(ci1)
# Use 1 = x_bar - 1.96 * sd/sqrt(n)
S21 <- n1^2 * (x_bar1 - ci1[1])/1.96
download.file("http://www.openintro.org/stat/data/bdims.RData", destfile = "bdims.RData")
load("bdims.RData")
head(bdims)
View(bdims)
quit()
rm(list = ls())
getwd()
source('~/.active-rstudio-document')
rm(list = ls())
source('~/Git_repos/EANBiT_RT/Advanced_R/JSON_work/script_JSON_to_circular_plots.R')
# Working with JSON files.
setwd("~/Git_repos/EANBiT_RT/Advanced_R/JSON_work/")
getwd()
library(dplyr)
data <- rjson::fromJSON(file = "ERR987781.json")
str(data)
class(data) # a simple list
typeof(data)
length(data) # there are 12 slots at the highest level of the data object
names(data) # here we have 12 contigs
# we want to get the length for all of the 12 slots in data:
lapply(X = data, FUN = length) # applying the same operation to all slots
data[[2]][[1]]$ARO_name
data[[2]][[7]]$ARO_name
# In order to be able to create a table like the one Ivan shared with us on Slack,
# we need to write with lists of lists, and traverse them recursively until we reach
# a list that contains a slot called "ARO_name", another called "type_match", etc
extract_ARO_name = function(l) { l$ARO_name } # extracting directly from the list containing that field "ARO_name"
extract_ARO_name_level1 = function(l) { lapply(X = l, FUN = extract_ARO_name) } # extracting iteratively from all the lists at a higher level
extract_ARO_name_level1(data[[2]]) # this is an example of how we can use the function we just defined above
names(data[[2]][[7]])
# Because of the way we defined our functions above, hardcoding the
# name of the field we want to extract, we have to write again almost the
# exact same function to extract another field...
extract_RGI_criteria = function(l) { l$type_match }
extract_RGI_criteria_level1 = function(l) { lapply(X = l, FUN = extract_RGI_criteria) }
extract_RGI_criteria_level1(data[[2]])
data[[4]]
# then build a data frame column by column:
col1 = unlist(extract_RGI_criteria_level1(data[[4]]), use.names=FALSE)
extract_RGI_criteria_level1(data[[2]])
length(col1)
typeof(col1)
head(col1)
col2 = unlist(extract_ARO_name_level1(data[[4]]), use.names=FALSE)
# then we make a tibble out of those two columns
tibble::tibble(`RGI Criteria` = col1, `ARO Term` = col2) -> my_table
## more flexible extractors (parameterizable) are a better solution:
# instead of writing different functions to extract different fields,
# we parameterize our functions so that they take the name of the field
# to be extracted as an argument.
extract_field = function(mylist, myfield) { `[[`(mylist, myfield) }
# testing the above:
extract_RGI_criteria(data[[2]][[2]])
extract_field(data[[2]][[2]], "type_match")
extract_field_level1 <- function(mylist, myfield) { lapply(X = mylist, FUN = `[[`, myfield) }
unlist(data, recursive = F, use.names = F) -> big_obj # getting a list with 863 slots
col1 = unlist(extract_field_level1(big_obj, 'type_match'), use.names = FALSE)
col2 = unlist(extract_field_level1(big_obj, 'ARO_name'), use.names = FALSE)
perc_id = unlist(extract_field_level1(big_obj, 'perc_identity'), use.names = FALSE)
tibble::tibble(`RGI Criteria` = col1, `ARO Term` = col2, `%age identity` = perc_id) -> my_table
View(my_table)
# we tabulate the values in the first column to see how many "Loose",
# "Strict", etc:
head(my_table)
table(my_table$`RGI Criteria`)
my_table %>% filter(`RGI Criteria` != 'Loose') -> reduced_table
# we first create an empty tibble:
tibble::tibble(slot = numeric(0), `RGI Criteria` = character(0), `ARO Term` = character(0), `Detection criteria` = character(0), `Resistance Mechanism` = character(0), `%age identity` = numeric(0), ARO_names = list()) -> growing_table
for (i in 1:length(big_obj)) {
# at this stage, big_obj[[i]] is an element we want to extract fields from
element <- big_obj[[i]]
if (element$type_match == "Loose") next
ARO_stuff = element$ARO_category
n = length(ARO_stuff) # so the last element is at position n in that list
growing_table <- bind_rows(
growing_table,
tibble(slot = i,
`RGI Criteria` = element$type_match,
`ARO Term` = element$ARO_name,
`Detection criteria` = element$model_type,
`Resistance Mechanism` = ARO_stuff[[n]]$category_aro_name,
`%age identity` = element$perc_identity,
ARO_names = list(names(element$ARO_category))))
}
# after which, we have a nice tibble.
View(growing_table)
# DEBUG
big_obj[[862]]$ARO_category$`35997`$category_aro_name
library(ggplot2)
nrow(growing_table) # 18
growing_table %>% ggplot(mapping = aes(x = `Resistance Mechanism`)) + geom_bar(width = 0.7) + theme(axis.text.x = element_text(angle=45 ,hjust = 1))
growing_table %>% ggplot(mapping = aes(x = `Resistance Mechanism`)) + geom_bar(width = 0.7) + theme(axis.text.x = element_text(angle=45 ,hjust = 1, margin = margin(t=.3,unit = "cm")))
library(ggplot2)
library(scales)
nrow(growing_table) # 18
growing_table %>% ggplot(mapping = aes(x = `Resistance Mechanism`)) + geom_bar(width = 0.7) +
theme(axis.text.x = element_text(angle=45 ,hjust = 1)) +
scale_x_discrete(labels = wrap_format(10))
growing_table %>% ggplot(mapping = aes(x = `Resistance Mechanism`)) + geom_bar(width = 0.7) +
theme(axis.text.x = element_text(angle=45 ,hjust = 1)) +
scale_x_discrete(labels = wrap_format(5))
growing_table %>% ggplot(mapping = aes(x = `Resistance Mechanism`)) + geom_bar(width = 0.7) +
theme(axis.text.x = element_text(angle=45 ,hjust = 1)) +
scale_x_discrete(labels = wrap_format(0))
growing_table %>% ggplot(mapping = aes(x = `Resistance Mechanism`)) + geom_bar(width = 0.7) +
theme(axis.text.x = element_text(angle=45 ,hjust = 1)) +
scale_x_discrete(labels = wrap_format(5))
growing_table %>% ggplot(mapping = aes(x = `Resistance Mechanism`)) + geom_bar(width = 0.7) +
theme(axis.text.x = element_text(angle=45 ,hjust = 1)) +
scale_x_discrete(labels = wrap_format(20))
growing_table %>% ggplot(mapping = aes(x = `Resistance Mechanism`)) +
geom_bar(width = 0.7, fill = "blue") +
theme(axis.text.x = element_text(angle=45 ,hjust = 1)) +
scale_x_discrete(labels = wrap_format(20))
growing_table %>% ggplot(mapping = aes(x = `Resistance Mechanism`, fill = `Resistance Mechanism`)) +
geom_bar(width = 0.7) +
theme(axis.text.x = element_text(angle=45 ,hjust = 1), legend.position = "right") +
scale_x_discrete(labels = wrap_format(20))
growing_table %>% ggplot(mapping = aes(x = `Resistance Mechanism`, fill = `RGI criteria`)) +
geom_bar(width = 0.7) +
theme(axis.text.x = element_text(angle=45 ,hjust = 1), legend.position = "right") +
scale_x_discrete(labels = wrap_format(20))
growing_table %>% ggplot(mapping = aes(x = `Resistance Mechanism`, fill = `RGI Criteria`)) +
geom_bar(width = 0.7) +
theme(axis.text.x = element_text(angle=45 ,hjust = 1), legend.position = "right") +
scale_x_discrete(labels = wrap_format(20))
growing_table %>% ggplot(mapping = aes(x = `Resistance Mechanism`, fill = `%age identity`)) +
geom_bar(width = 0.7) +
theme(axis.text.x = element_text(angle=45 ,hjust = 1), legend.position = "right") +
scale_x_discrete(labels = wrap_format(20)) +
scale_fill_gradient(low = "#00F000", high = "#F00000")
setwd("~/Git_repos/EANBiT_RT/Advanced_R")

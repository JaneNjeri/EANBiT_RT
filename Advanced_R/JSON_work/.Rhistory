install.packages(c("BiocManager", "ggplot2", "gplots", "pheatmap", "RColorBrewer", "reshape2"))
helloLinuxHint <- "Hello World"
print (helloLinuxHint)
ls
ls()
Rscript linuxhint.R
q()
sd
my_std_error <- function(x){
sd = sd(x)
len = length(x)
se = sd/sqrt(len)
}
numbers <- c(1:10)
numbers
my_std_error(numbers)
err <- my_std_error(numbers)
err
q()
q()
q()
q()
err
BiocManager::install("dada2")
install.packages("dada2")
install.packages("littler")
exit()
quit()
n <- 25
ci <- c(65,77)
x_bar <- mean(ci)
S2 <- n^2 * (x_bar - ci[1])/1.96
n1 <- 43
ci1 <- c(1,6)
# Take the middle of the CI to get x_bar (3.5).
x_bar1 <- mean(ci1)
# Use 1 = x_bar - 1.96 * sd/sqrt(n)
S21 <- n1^2 * (x_bar1 - ci1[1])/1.96
download.file("http://www.openintro.org/stat/data/bdims.RData", destfile = "bdims.RData")
load("bdims.RData")
head(bdims)
View(bdims)
quit()
rm(list = ls())
pwd()
getwd()
r --version
R --version
install.packages("tidyverse")
#three types of data types: logical, numeric, character
#one cannot mix several types within a single vector
y <- c("Alpha", 1, TRUE)
#most permissive way
y
#order of permissivity : logical < numeric < character
c(2.3, FALSE)
#NAMED VECTOS
series <- runif(10)
series
summary(series)
str(series)
summary(series) <- summ
summ <- summary(series)
str(summ)
class(summ)
#we can create named objects
x <- structure(c("a","b","c"), names = c(1,2,3))
names(x)
x[1]
blood_groups <- c("A","B","AB","AB","A","O","O","A")
typeof(blood_groups)
class(blood_groups)
blood_groups <- factor("A","B","AB","AB","AB","A","O","O","A")
blood_groups <- factorc(("A","B","AB","AB","AB","A","O","O","A"))
blood_groups <- factor(c("A","B","AB","AB","AB","A","O","O","A"))
typeof(blood_groups)
class(blood_groups)
#IMPOTANT
#factors are actually encoded as integer vectors
str(blood_groups)
#changing the levels of a facto DOES NOT affect the internal representation
levels(blood_groups)
levels(blood_groups) <- c("B","AB","A","O")
blood_groups
cigarettes <- factor(c("10","20","15","5","1","1","1","2","3","6","4"))
levels(cigarettes)
# **** DO NOT DO :
as.integer(cigarettes)
as.character(cigarettes)
as.integer(as.character(cigarettes))
#DATA FAMES
y = data.frame(1:11, LETTERS[10:21])
#DATA FAMES
y = data.frame(1:11, LETTERS[10:20], cigarettes)
y
#BEWArE! factos cannot be concatenated. Each factor comes with its own world of labels
c(factor("a","b")), factor("b")
#BEWArE! factos cannot be concatenated. Each factor comes with its own world of labels
c(factorc(("a","b")), factor("b"))
#BEWArE! factos cannot be concatenated. Each factor comes with its own world of labels
c(factor(c("a","b")), factor("b"))
#the right way
factor(as.character(c(as.character(factor(c("a","b"))), as.character(factor("b")))
#the right way
factor(c(as.character(factor(c("a","b"))), as.character(factor("b")))
#the right way
factor(c(as.character(factor(c("a","b"))), as.character(factor("b"))))
#as.integer() truncates the double values it is given
y <- data.frame(random_numbers = as.integer(runif(11, 0, 10000)), letter = LETTERS[10:20],
no_cig_per_day = cigarettes)
y
str(y)
names(y)
attributes(y)
rownames(y)
#we can use either integers (indices) or names to subset from y
head(y)
y[4,3]
#when I subset. the remaining rows still have their *original* name:
subset_y <- y[c(1,5,6),]
subset_y
y[2,]
y["5",] #same as above
y["5", "letter"]  #row with name "5", column with name "letter"
y["5",] #same as above
names(y)  #
#data frames are *lists* whose slots are the columns
typeof(y) #list
class(y) #data.fame
y[2]
class(y[2])
#LISTS
list(4,89,4) -> dummy_list
class(dummy_list[3])
#but the *contents* of the n_th slot are accessed with l[[n]]
dummy_list[[3]]
#we have two ways of extracting the vecto contents of a named column in a data fame
y
y[[2]]
y[[1]]
y[,1]
y[1] #yields a dataframe containing one column
y[,1] #yields the vecto content of the first column, more simply:
y[[1]] #vector content
y$random_numbers #same thing
y["random_numbers"] #exactly the same as above, using column name instead of index
#built-in
sum(y$random_numbers)
y$`random_numbers`` #same thing
y$`random_numbers` #same thing
y$`random_numbers` #same thing
y$`new column` <- 1:11
names(y)
y$`new_column`
3+4
`+`(3,4)
# even subsetting is a fucntion
x[2]
`[`(x,2) #exactly the same
# or subsetting from a list or data frame:
class(y) # a data fame
`[[`(y,1)  # exactly the same as witting y[[1]]
library(tidyr)
library(tidyr)
install.packages(tidyverse)
install.packages(Tidyverse)
install.packages("tidyverse")
library(tidyverse)
y[[-1]]
y[[,-1]]
y[[-1,]]
library(tidyverse)
library(tidyverse)
library("readxl", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.6")
detach("package:readxl", unload=TRUE)
`%>%`
library("readxl", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.6")
#import data from an Excel file using readxl
readxl::read_xlsx("~/Git_repos/EANBiT_RT/Advanced_/tutorial_data.xlsx") -> data1
#import data from an Excel file using readxl
readxl::read_xlsx("~/Git_repos/EANBiT_RT/Advanced_/tutorial_data.xlsx", sheet = 2) -> data1
#import data from an Excel file using readxl
readxl::read_xlsx("~/Git_repos/EANBiT_RT/Advanced_/tutorial_data.xlsx") -> data1
glimpse(data1)
data1 %>% select(BMI)
data1 %>% select(BMI) %>% mean(na.rm=T)
data1[[BMI]]
mean(data1[["BMI"]])
View(data1)
# the right way to do it with dply
data1 %>% summarise(meanBMI = mean(BMI))
# we can use helper functions to determine which columns to select
names(data1)
data1 %>% select(c(4,5,6))
data1 %>% select(c(1,4,6))
data1[c(1,4,6)]
data1 %>% select(starts_with("D"))
data1 %>% select(contains("E"))
data1 %>% select(contains("E", ignore.case = F))
# to select rows (aka: cases or observations) use filter():
data1 %>% filter(AGE >= 62)
# combining filters
data1 %>% filter(AGE >= & SYSBP<100) # logical AND
# combining filters
data1 %>% filter(AGE >= 62 & SYSBP<100) # logical AND
data1 %>% filter(AGE >= 62 | SYSBP < 100) # logical OR
data1 %>% filter(AGE == 62)  # equality test operator is ==
# by the way, on complex objects, use identical():
a <- c(1,2,3)
b <- 1:3
a==b # element-wise comparison
identical(a,b)
identical(as.integer(a), b) # TRUE
#NEVEr use '=' operator
data1 %>% select(AGE = 62)
# group_by enables goup of operations
data1 %>% group_by(educ)
data1 %>% group_by(educ, summarise(meanBMI = mean(BMI)))
data1 %>% group_by(educ) summarise(meanBMI = mean(BMI))
data1 %>% group_by(educ) %>% summarise(meanBMI = mean(BMI))
# group of more than one column
data1 %>% group_by(educ) %>% group_by(SEX)
install.packages('rjson')
setwd("~/Git_repos/EANBiT_RT/Advanced_/JSON_work/")
library(rjson)
data <- fromJSON(file = "ERR987781.json")
class(data)
typeof(data)
length(data)
detach("package:rjson", unload=TRUE)
names(data)
# we want to get the length of all the 12 slots in the data
lapply(X = data, FUN = length)
data[[2]][[1]]
data[[2]][[1]]$ARO_name
data[[2]][[7]]$ARO_name
extract_ARO_name = function(l) {l$ARO_name}
extract_ARO_name = function(l) { l$ARO_name }
extract_ARO_name_level1 = function(l) { lapply(X=l, FUN = extract_ARO_name) }
extract_ARO_name_level1(data[2])
extract_ARO_name_level1(data[[2]])
names(data[[2]][[7]])
extract_RGI_criteria = function(l) { l$RGI_criteria }
extract_RGI_criteria_level1 = function(l) { lapply(X=l, FUN = extract_RGI_criteria) }
extract_RGI_criteria_level1(data[[2]])
unlist(data, recursive = F) -> big_obj
big_obj[[2]]
names(big_obj)
big_obj[[2]][[2]]
extract_RGI_criteria = function(l) { l$type_match }
extract_RGI_criteria_level1 = function(l) { lapply(X=l, FUN = extract_RGI_criteria) }
extract_RGI_criteria_level1(data[[2]])
